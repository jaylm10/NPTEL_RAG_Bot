now let us continue our discussions from what where we were in the first part of sdn sowe are now in the second lecture second part of software defined networks so we have alreadytalked about we have understood the rule placement problem and what are the different issuessurrounding rule placement and tcam tcam memory its limitations and how the rules can be createdand how much time these rules are going to be maintained at the switches in the differentdifferent flow tables of these switches so the other issue that is very importantis the controller placement problem and this is what we are going to discuss next so wehave just as a recap we have already in the first part of sdn we have understood the basicconcept behind sdn the architecture of sdn the rule placement problem and the tradeoffbetween tcam limitations limited memory tcam memory and the delay and we have also understoodthe open flow protocol and flow rule and the math rule ah math fields in the open flowprotocol so in sdn between the data plane and between the data plane and the controlplane we have an api and another api between the control plane and the application planeso the first one that means between the control plane and the data plane and that means theinfrastructure what we have is the south southbound api and the openflow protocol is the protocolthat is used for the southbound api communication for the northbound api this northbound apiis used to communicate between the control layer and the application layer these twoplans control plane and the application plane and the all these existing standard api isthat are used can still be used in the northbound api there is also the concept of another kindof api which is called the east westbound east westbound api and this concept this terminologycomes into picture when we are talking about not a single controller but multiple controllersin the control layer so controllers basically define the rule theflow rule according to the application specific requirements so basically you know what ishappening over here in sdn is that the control logic is basically you know taken care ofby the control plane so you know so control logic is separated out and as a result thecontroller knows what has to be done with a particular flow and and the controller basicallycontrols the overall flow in the network and each of these switches what they are goingto do that is done by the controller so now going back the controllers define theflow rule according to the application specific requirements the controller must be able tohandle all these incoming requests from the switches and the rules should be placed withoutincurring much delay and that is important you know so typically you know so in the rulesthe placement of the rules if it is not already existing in the flow table of a switch typicallyas we have seen before takes about three to five milliseconds but you know this has tobe minimized because otherwise what is going to happen is there are you know there therewill be a huge control overhead and that has to be that because the controller is beingseparated out the control logic is separated out to the controller we do not want too muchof a control delay control linked delay to happen there is a trade off definitely youknow we cannot avoid this delay but we have to minimize this particular delayso typically a controller can handle roughly about two hundred requests in a second andthat is applicable for only the single threaded applications thing you know so the controllerswhich are implementing similar thread but currently multi threaded applications in controllersare also possible the controllers are logically connected to the switches in a one hop distanceit is just a logical connection you know so the controller from the switch the switchthinks that the controller is away just a hop distance from it just one hop from itbut actually it is not so actually you know physically when we are talking about the controllerand the switch can be multiple hops away and typically they are multiple hops awayso if we have a small number of controllers for a large network the network might be congestedwith control packets these packet in messages and so if we look at this controller placementthere a different architectures you know how and where we are going to place this controllerso one architecture the basic architecture is called the flat architecture and here basicallythe switch and the controller they are just logically one hop away the switch sends apacket in message to the controller if the switch already doesnt have this flow rulefor the particular flow that it has received so it will set a send a packet in messageto the controller and the controller is going to send back the flow rule corresponding tothat to that particular that means how it is at how the switch is going to treat ityou know that particular instruction is going to be sent by the controller the controllerknows it the controller knows how the different flows how the different packets are goingto be handled this is the assumption in ah in this particular technology sdn technologyso this is the flat architecture then we can have different other architectures this isthe hierarchical or the tree architecture and these i do not need to elaborate furtherbut it is quite obvious we have these different switches and hierarchically they are placedwithin the controllers are placed and connected to these different switches in a tree likefashion and we have this packet in message and the corresponding flow rule coming backfor each of these connectivities then have the ring architecture in the ring architecturewe have a similar kind of thing but we have to keep in mind that in the ring architectureso so basically these controllers are placed in a ring like fashion we have multiple controllerslike this placed in ring like fashion but a particular switch is connected to only onecontroller in this version so so when the packet in request has to besent this packaging request will be sent to a single controller only not that it can besent to any of the other controllers in the ring it will be sent to a single controllerand the flow rule is going to be sent to this particular switch that has requested the ruleand then we have the mesh architecture mesh as we know increases the reliability and asyou can see over here for instance we have two different switches who can be connectedto a single controller so if this one goes down there is the other one which can takeover and so on so it basically increases improves the fault tolerance and improves the reliabilityof the network the mesh architecture now this control how this control is goingto be done how the control decisions are going to be made there are two different approachesone is the distributed the other one is centralized in the distributed the control divisions canbe taken in a distributed manner for example each sub network is controlled by a differentcontroller and in the centralized mechanism the control decisions are taken in a centralizedmanner for example a network is controlled by a single controller so in such a case itsa centralized control and dividing into different sub networks are having a controller correspondingto it will be distributed solution there is also a concept of backup controller so ifthe primary controller is down then the backup controller takes overso backup controller has a replica of the main controller and if the main controlleris down the backup controller controls the network to have uninterrupted network managementanother very important thing is true in sdn one can have enhanced level of security inthe network and in this particular case we will be taking help of the firewall proxyhttp etcetera etcetera and the ids and these can have improved security with respect tothis technology so so just as a very brief you know here we are not going to discussabout you know improving security with sdn and in much detail but just as a brief youknow this is the this is this is a this is a paper which was published in sigcomm intwo thousand thirteen very recently that means which is talking about the simplifying protocolfor policy enforcement so what it does so you know let us look atthis particular figure so it is an example of a potential data plane ambiguity to implementthe policy chain this chain firewall ids proxy in this particular topology and the sequenceof flow of instructions is like this so it will this is from from the http ah when ahttp request comes then it is sent from one switch to another switch this particular switchthen it goes to the ids comes back goes to the proxy and the forwarding ah and the firewalland then finally to ah this particular switch and then to the then finally out of the networkso this is how you know security is implemented and enhanced using sdn so we are not talkingabout as i mentioned already i just wanted to show you that security can indeed be improvedwith the help of sdn and we do not want to discuss anything further on this particularah issue so how do you so let us say that we have implementedsdn or we want to implement sdn and so so one of the things is that we have to experimentwe have to experiment we have to evaluate the performance through experimentation soexperimentation can be done with the help of simulators or they can be done with thehelp of emulators in emulators basically you know what happens it is bittle little ah differentfrom the simulators so you know here the real you know the emulators can be connected tothe real network where real traffic can flow through this emulator and the data can beanalyzed the performance of the the ah ah network can be analyzed ah using these ahemulators simulators on the other hand basically simulate the entire thing packet flows thenetwork the nodes everything is simulated so these simulators are the emulators takecare of few different things one is the infrastructure deployment and this must be supported withopen flow and the controller placement which must support open flow this controller canbe a remote controller or a local controller and in the remote basically the controllercan be situated in a remote place and communicated using ip address and port number a local controllerbasically does you know everything is local the controller itself is local and you knowit takes care of it in a ah takes care of it locally for switch deployment the mininetsoftware is very mininet simulator it is an emulator as well so it it is very useful itis used to create a virtual network with open flow enable switches it runs on python andsupports remote and local controllers both both remote controller and local controllersare supported by mininet there are controller configuration softwarefor example pox nox floodlight open daylight and onos particularly open daylight and onosare the most popular once that are used for controller configuration so with this we cometo almost the end of the lecture on sdn and we have understood the basics of sdn whatis the motivation behind sdn why do we want to separate out the control logic from thedata data logic data plane which takes care of functions like forwarding etcetera to makethe network efficient but there is a trade off as well and we have seen that that morenumber of control packets are going to flow through the network but we want to minimizethat control logic and this is where lot of research is being undertaken at present andwe have also seen that the performance of sdn basically depends on two particular issuesthe rule placement and the controller placement in the network control message overhead asi was mentioning before will be increased due to additional number of packets the packetin messages from the switches to the controller going through and what is required is to havean unified network management to be made ah should be made possible using sdn while leveragingthe global view of the network so we need to have an unified unified network managementah architectural framework using sdm with this week come to an end of the sdn lectureand ah so next what we are going to talk about in another ah the next lecture is how sdncan be used in iot to make iot efficient internet of things efficient so will will have to waitfor the next lecture in order to understand this thank you